"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .attempt import Attempt
from .connection import Connection
from .destination import Destination
from .destination_definition import DestinationDefinition
from .destination_definition_specification import DestinationDefinitionSpecification
from .destination_oauth import DestinationOauth
from .health import Health
from .internal import Internal
from .jobs import Jobs
from .logs import Logs
from .notifications import Notifications
from .openapi import Openapi
from .operation import Operation
from .scheduler import Scheduler
from .sdkconfiguration import SDKConfiguration
from .source import Source
from .source_definition import SourceDefinition
from .source_definition_specification import SourceDefinitionSpecification
from .source_oauth import SourceOauth
from .state import State
from .web_backend import WebBackend
from .workspace import Workspace
from airbyte import utils

class Airbyte:
    r"""Airbyte Configuration API: Airbyte Configuration API
    [https://airbyte.io](https://airbyte.io).
    
    This API is a collection of HTTP RPC-style methods. While it is not a REST API, those familiar with REST should find the conventions of this API recognizable.
    
    Here are some conventions that this API follows:
    * All endpoints are http POST methods.
    * All endpoints accept data via `application/json` request bodies. The API does not accept any data via query params.
    * The naming convention for endpoints is: localhost:8000/{VERSION}/{METHOD_FAMILY}/{METHOD_NAME} e.g. `localhost:8000/v1/connections/create`.
    * For all `update` methods, the whole object must be passed in, even the fields that did not change.
    
    Authentication (OSS):
    * When authenticating to the Configuration API, you must use Basic Authentication by setting the Authentication Header to Basic and base64 encoding the username and password (which are `airbyte` and `password` by default - so base64 encoding `airbyte:password` results in `YWlyYnl0ZTpwYXNzd29yZA==`). So the full header reads `'Authorization': \"Basic YWlyYnl0ZTpwYXNzd29yZA==\"`
    https://airbyte.io - Find out more about Airbyte
    """
    attempt: Attempt
    r"""Interactions with attempt related resources."""
    connection: Connection
    r"""Connection between sources and destinations."""
    destination: Destination
    r"""Destination related resources."""
    destination_definition: DestinationDefinition
    r"""DestinationDefinition related resources."""
    destination_definition_specification: DestinationDefinitionSpecification
    r"""DestinationDefinitionSpecification related resources."""
    destination_oauth: DestinationOauth
    r"""Source OAuth related resources to delegate access from user."""
    health: Health
    r"""Healthchecks"""
    internal: Internal
    jobs: Jobs
    logs: Logs
    notifications: Notifications
    openapi: Openapi
    operation: Operation
    scheduler: Scheduler
    source: Source
    r"""Source related resources."""
    source_definition: SourceDefinition
    r"""SourceDefinition related resources."""
    source_definition_specification: SourceDefinitionSpecification
    r"""SourceDefinition specification related resources."""
    source_oauth: SourceOauth
    r"""Source OAuth related resources to delegate access from user."""
    state: State
    r"""Interactions with state related resources."""
    web_backend: WebBackend
    r"""Endpoints for the Airbyte web application. Those APIs should not be called outside the web application implementation and are not
    guaranteeing any backwards compatibility.
    """
    workspace: Workspace
    r"""Workspace related resources."""

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session        
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = client
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.attempt = Attempt(self.sdk_configuration)
        self.connection = Connection(self.sdk_configuration)
        self.destination = Destination(self.sdk_configuration)
        self.destination_definition = DestinationDefinition(self.sdk_configuration)
        self.destination_definition_specification = DestinationDefinitionSpecification(self.sdk_configuration)
        self.destination_oauth = DestinationOauth(self.sdk_configuration)
        self.health = Health(self.sdk_configuration)
        self.internal = Internal(self.sdk_configuration)
        self.jobs = Jobs(self.sdk_configuration)
        self.logs = Logs(self.sdk_configuration)
        self.notifications = Notifications(self.sdk_configuration)
        self.openapi = Openapi(self.sdk_configuration)
        self.operation = Operation(self.sdk_configuration)
        self.scheduler = Scheduler(self.sdk_configuration)
        self.source = Source(self.sdk_configuration)
        self.source_definition = SourceDefinition(self.sdk_configuration)
        self.source_definition_specification = SourceDefinitionSpecification(self.sdk_configuration)
        self.source_oauth = SourceOauth(self.sdk_configuration)
        self.state = State(self.sdk_configuration)
        self.web_backend = WebBackend(self.sdk_configuration)
        self.workspace = Workspace(self.sdk_configuration)
    